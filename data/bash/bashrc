# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# Don't run this twice
bashrc_guard=DOTFILES_BASHRC_$$
if [ ! -z "`eval echo \\$$bashrc_guard`" ]; then
    # $HOME/.config/dotfiles/data/scripts/dotfiles_log.sh shell "bash/bashrc would've been ran twice; aborting 2nd run. [`pstree -s -p $$`]"
    return
fi
export $bashrc_guard=y

# $HOME/.config/dotfiles/data/scripts/dotfiles_log.sh shell "bash/bashrc start [`pstree -s -p $$`]"

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

if [ -f "$HOME/.config/dotfiles/data/shell/environment.sh" ]; then
    . "$HOME/.config/dotfiles/data/shell/environment.sh"
fi

if [ -f "$DOTFILES_HOME/data/tmux/scripts/start.sh" ]; then
    "$DOTFILES_HOME/data/tmux/scripts/start.sh"
    if [ $? != 0 ]; then
        exit
    fi
fi
function __tmux_shell_post_command() {
    ($DOTFILES_HOME/data/tmux/scripts/shell-post-command.sh &)
}
PROMPT_COMMAND="__tmux_shell_post_command;$PROMPT_COMMAND"

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=2500
HISTFILESIZE=5000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ -f "$HOME/.config/dotfiles/data/shell/rc.sh" ] ; then
    . "$HOME/.config/dotfiles/data/shell/rc.sh"
fi
if [ -f "$DOTFILES_HOME/data/fzf/key-bindings.bash" ] ; then
    . "$DOTFILES_HOME/data/fzf/key-bindings.bash"
fi

function __print_separator() {
    echo -ne '\x1b[0;48;5;236m\x1b[K\x1b[0m'
}
if [ -n "$TMUX" ]; then
    PROMPT_COMMAND="__print_separator;$PROMPT_COMMAND"
fi

PROMPT_TIMESTAMP_FORMAT='%H:%M:%S' # argument for `date`
PROMPT_TIMESTAMP_PRE="\[\x1b[0m\]\[\x1b[0;38;5;247m\]"
PROMPT_TIMESTAMP_POST="\[\x1b[0m\] "
function __my_prompt_command() {
    local _last_exit="$?"
    PS1=`echo -en "$PROMPT_TIMESTAMP_PRE"`
    PS1+=`date +"$PROMPT_TIMESTAMP_FORMAT"`
    PS1+=`echo -en "$PROMPT_TIMESTAMP_POST"`
    if [ $_last_exit != 0 ]; then
        PS1+="\[\e[0;31m\]â®œ $_last_exit â®ž "
    fi
    if [ "$UID" -eq "0" ]; then
        PS1+="\[\e[0;33m\]ROOT "
    fi
    PS1+="\[\e[32m\]ðŸ¡² \[\e[0m\]"
}
if [ -n "$TMUX" ]; then
    PROMPT_COMMAND="__my_prompt_command;$PROMPT_COMMAND"
fi

# $HOME/.config/dotfiles/data/scripts/dotfiles_log.sh shell bash/bashrc end
