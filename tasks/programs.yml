---

- include_tasks:
    file: tasks/symlinks.yml

- name: initialize programs_packages_filtered
  set_fact:
    programs_packages_filtered: []

- name: populate programs_packages_filtered
  set_fact:
    programs_packages_filtered: "{{ programs_packages_filtered + [item if item is string else (item.keys() | first)] }}"
  when: item is string or ansible_distribution in (item.values() | flatten)
  loop: "{{ programs.packages }}"

- name: install packages
  package:
    name: "{{ programs_packages_filtered }}"
    state: present
  become: yes

- name: find post-package hooks
  stat:
    path: "tasks/programs/post-{{ item }}.yml"
    get_attributes: no
    get_checksum: no
    get_mime: no
  with_items: "{{ programs_packages_filtered }}"
  register: _program_stat

- name: run post-package hooks
  include_tasks: "tasks/programs/post-{{ item.item }}.yml"
  when: item.stat.exists
  loop: "{{ _program_stat.results }}"
  loop_control:
    label: "{{ item.item }}"


- name: initialize programs_custom_filtered
  set_fact:
    programs_custom_filtered: []

- name: populate programs_custom_filtered
  set_fact:
    programs_custom_filtered: "{{ programs_custom_filtered + [item if item is string else (item.keys() | first)] }}"
  when: item is string or ansible_distribution in (item.values() | flatten)
  loop: "{{ programs.custom }}"

- name: install custom programs
  include_tasks:
    file: "tasks/programs/{{ program }}.yml"
  with_items: "{{ programs_custom_filtered }}"
  when: program not in programs_packages_filtered
  loop_control:
    loop_var: program

- name: "create {{ services_home }}"
  file:
    path: '{{ services_home }}'
    state: directory
    mode: '755'
  become: yes

- name: clone services
  git:
    repo: '{{ services_repo }}'
    dest: '{{ services_home }}'
    force: no
    update: no
  become: yes

